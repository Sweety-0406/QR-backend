// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init



generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  email     String   @unique
  password  String
  role      String   @default("user") // "user" or "admin"
  menuItems MenuItem[] @relation("AdminMenuItems")
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MenuItem {
  id          String   @id @default(uuid()) @map("_id")
  name        String
  description String
  price       Float
  adminId     String
  admin       User     @relation("AdminMenuItems", fields: [adminId], references: [id], onDelete: Cascade)
  order       Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id         String   @id @default(uuid()) @map("_id")
  username   String
  quantity   Int
  adminId    String
  itemId     String
  item       MenuItem @relation(fields: [itemId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
// model Order {
//   id         String   @id @default(uuid()) @map("_id")
//   username   String
//   contact    String
//   items      Json     // Array of menu items
//   totalPrice Float
//   userId     String
//   user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
// }
